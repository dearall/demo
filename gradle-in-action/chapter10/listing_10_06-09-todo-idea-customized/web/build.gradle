plugins {
    id 'war'
    id "org.gretty" version "3.0.6"
    id 'groovy'
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

ext.seleniumGroup = 'org.seleniumhq.selenium'
ext.seleniumVersion = '3.141.59'

dependencies {
    implementation project(':model')
    implementation project(':repository')
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    runtimeOnly 'javax.servlet:jstl:1.2'
    runtimeOnly 'taglibs:standard:1.1.2'
    testCompile 'org.codehaus.groovy:groovy:2.4.21'
    testCompile 'junit:junit:4.13.2'
    functTestCompile 'org.codehaus.geb:geb-junit4:0.7.2'
    functTestCompile "$seleniumGroup:selenium-api:$seleniumVersion"
    functTestRuntime "$seleniumGroup:selenium-firefox-driver:$seleniumVersion"
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/functTest/groovy')
        resources.srcDir file('src/functTest/resources')
        compileClasspath = sourceSets.main.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.outputLocation.fileValue reports.html.outputLocation.dir("functional").get().asFile
    reports.junitXml.outputLocation.fileValue reports.junitXml.outputLocation.dir("functional").get().asFile

    systemProperty 'geb.env', 'firefox'
    systemProperty 'geb.build.reportsDir', reporting.file("$name/geb")
}

check.dependsOn functionalTest

idea {
    module {
        sourceSets.functionalTest.allSource.srcDirs.each {
            testSourceDirs += it
        }

//    scopes.TEST.plus += configurations.functTestCompile
//    scopes.TEST.plus += configurations.functTestRuntime
    }
}